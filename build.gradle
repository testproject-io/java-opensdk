/*
 * Copyright 2020 TestProject LTD. and/or its affiliates
 * and other contributors as indicated by the @author tags.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'java-library'
    id 'checkstyle'
    id 'com.github.spotbugs' version "4.2.3"
    id 'maven-publish'
    id 'signing'
    id 'io.codearte.nexus-staging' version '0.21.2'
}

println("> Using Java: " + JavaVersion.current())
if (JavaVersion.current() < JavaVersion.VERSION_11) {
    throw new GradleException("Build requires JDK 11 or higher.")
}

sourceCompatibility = 11
targetCompatibility = 11

def sdkVersion = !project.version.equals("unspecified") ? project.version : "0.0.1"
def variant = project.hasProperty("release") && project.getProperty("release") ? "RELEASE" : "SNAPSHOT"

group 'io.testproject'
version "${sdkVersion}-${variant}"
println("> Building ${version}")

repositories {
    jcenter()
}

dependencies {

    // Java client for Appium Mobile Webdriver
    api group: 'io.appium', name: 'java-client', version: '7.3.0'

    // Use JUnit Jupiter API for testing.
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.5.1'

    // Module "junit-jupiter-params" of JUnit 5.
    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.5.1'

    // TestNG Testing framework
    testImplementation group: 'org.testng', name: 'testng', version: '7.1.0'

    // Logback classic module
    testImplementation group: 'ch.qos.logback', name: 'logback-classic', version: '1.2.3'

    // Logback core module
    testImplementation group: 'ch.qos.logback', name: 'logback-core', version: '1.2.3'

    // Annotations the SpotBugs tool supports
    implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.0.2'

    // Use JUnit Jupiter Engine for testing.
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.5.1'
}

checkstyle.configFile file("config/checkstyle/checkstyle.xml")
checkstyleMain.source = 'src/main/java'
checkstyleTest.source = 'src/test/java'

spotbugs {
    ignoreFailures = false
    showProgress = true
    effort = 'max'
}
spotbugsMain {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}
spotbugsTest {
    reports {
        xml.enabled = false
        html.enabled = true
    }
}

java {
    withJavadocJar()
    withSourcesJar()
}

javadoc {
    options.addStringOption('encoding', 'UTF-8')
}

jar {
    manifest {
        attributes 'Implementation-Title': project.name,
                 'Implementation-Version': project.version
    }
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            groupId = 'io.testproject'
            artifactId = 'java-sdk'
            from components.java
            versionMapping {
                usage('java-api') {
                    fromResolutionOf('runtimeClasspath')
                }
                usage('java-runtime') {
                    fromResolutionResult()
                }
            }
            pom {
                name = 'TestProject SDK'
                description = 'TestProject SDK for Java'
                url = 'https://testproject.io'
                licenses {
                    license {
                        name = 'The Apache License, Version 2.0'
                        url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                    }
                }
                developers {
                    developer {
                        id = 'mstrelex'
                        name = 'Marat Strelets'
                        email = 'marat@testproject.io'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/testproject-io/java-sdk.git'
                    developerConnection = 'scm:git:ssh://github.com/testproject-io/java-sdk.git'
                    url = 'https://github.com/testproject-io/java-sdk'
                }
            }
        }
    }

    repositories {
        maven {

            def ossrhUsername = findProperty("ossrhUsername")
            def ossrhPassword = findProperty("ossrhPassword")

            credentials {
                username "$ossrhUsername"
                password "$ossrhPassword"
            }
            def releasesRepoUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        }
    }
}

signing {
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

nexusStaging {
    def ossrhUsername = findProperty("ossrhUsername")
    def ossrhPassword = findProperty("ossrhPassword")

    username "$ossrhUsername"
    password "$ossrhPassword"
}

wrapper {
    gradleVersion = '6.4.1'
    distributionType = Wrapper.DistributionType.ALL
}

test {
    if (project.hasProperty('framework')) {
        String framework = getProperty('framework')
        if (framework == "JUNIT4") {
            useJUnit()
            println("> Using JUnit 4 for testing...")
        } else if (framework == "JUNIT5") {
            useJUnitPlatform()
            println("> Using JUnit 5 for testing...")
        } else if (framework == "TESTNG") {
            useTestNG()
            println("> Using TestNG for testing...")
        } else {
            println("> Unsupported framework specified: " + framework)
        }
    } else {
        println("> Using default framework: JUnit 5")
        useJUnitPlatform()
    }
}